{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","LinearInterpolator","MapState","noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","onViewportChange","onStateChange","TransitionManager","constructor","opts","_animationFrame","requestAnimationFrame","_onTransitionFrame","_updateViewport","props","time","getTime","Date","now","getViewportInTransition","state","propsInTransition","processViewportChange","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","startTime","duration","_triggerTransition","_endTransition","Boolean","_isUpdateDueToCurrentTransition","interpolator","arePropsEqual","cancelAnimationFrame","getDuration","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","shouldEnd","viewport","interpolateProps","mapState","getViewportProps"],"mappings":";AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAAQC,kBAAR,QAAiC,cAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAIA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,EAApC,EAAwC;AAC7C,QAAMC,EAAE,GAAGF,MAAM,CAACC,EAAD,CAAjB;AACA,SAAOE,CAAC,IAAK,KAAK,IAAID,EAAT,CAAD,IAAkBF,MAAM,CAACG,CAAC,IAAI,IAAIF,EAAR,CAAD,GAAeA,EAAhB,CAAN,GAA4BC,EAA9C,CAAZ;AACD;AAED,OAAO,MAAME,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,CADwB;AAE/BC,EAAAA,WAAW,EAAE,CAFkB;AAG/BC,EAAAA,MAAM,EAAE,CAHuB;AAI/BC,EAAAA,MAAM,EAAE;AAJuB,CAA1B;AAOP,MAAMC,aAAa,GAAG;AACpBC,EAAAA,kBAAkB,EAAE,CADA;AAEpBC,EAAAA,gBAAgB,EAAER,CAAC,IAAIA,CAFH;AAGpBS,EAAAA,sBAAsB,EAAE,IAAIhB,kBAAJ,EAHJ;AAIpBiB,EAAAA,sBAAsB,EAAET,iBAAiB,CAACC,KAJtB;AAKpBS,EAAAA,iBAAiB,EAAEhB,IALC;AAMpBiB,EAAAA,qBAAqB,EAAEjB,IANH;AAOpBkB,EAAAA,eAAe,EAAElB,IAPG;AAQpBmB,EAAAA,gBAAgB,EAAEnB,IARE;AASpBoB,EAAAA,aAAa,EAAEpB;AATK,CAAtB;AAYA,eAAe,MAAMqB,iBAAN,CAAwB;AAGrCC,EAAAA,WAAW,CAACC,IAAI,GAAG,EAAR,EAAY;AAAA,6CAOL,IAPK;;AAAA,gDAkJF,MAAM;AAEzB,WAAKC,eAAL,GAAuBC,qBAAqB,CAAC,KAAKC,kBAAN,CAA5C;;AACA,WAAKC,eAAL;AACD,KAtJsB;;AACrB,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKT,gBAAL,GAAwBI,IAAI,CAACJ,gBAAL,IAAyBnB,IAAjD;AACA,SAAKoB,aAAL,GAAqBG,IAAI,CAACH,aAAL,IAAsBpB,IAA3C;AACA,SAAK6B,IAAL,GAAYN,IAAI,CAACO,OAAL,IAAgBC,IAAI,CAACC,GAAjC;AACD;;AAKDC,EAAAA,uBAAuB,GAAG;AACxB,WAAO,KAAKT,eAAL,GAAuB,KAAKU,KAAL,CAAWC,iBAAlC,GAAsD,IAA7D;AACD;;AAIDC,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,UAAMC,YAAY,GAAG,KAAKV,KAA1B;AAEA,SAAKA,KAAL,GAAaS,SAAb;;AAGA,QAAI,CAACC,YAAD,IAAiB,KAAKC,2BAAL,CAAiCD,YAAjC,EAA+CD,SAA/C,CAArB,EAAgF;AAC9E,aAAO,KAAP;AACD;;AAED,QAAI,KAAKG,oBAAL,CAA0BH,SAA1B,CAAJ,EAA0C;AACxC,YAAMI,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,YAAlB,CAAnB;AACA,YAAMM,QAAQ,GAAGF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAlB,CAAjB;;AAEA,UAAI,KAAKQ,uBAAL,EAAJ,EAAoC;AAClCP,QAAAA,YAAY,CAACrB,qBAAb;;AAEA,YAAI,KAAKiB,KAAL,CAAWY,YAAX,KAA4BxC,iBAAiB,CAACE,WAAlD,EAA+D;AAC7DkC,UAAAA,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0B,KAAKP,KAAL,CAAWU,QAArC;AACD,SAFD,MAEO;AACLF,UAAAA,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0B,KAAKP,KAAL,CAAWC,iBAArC;AACD;;AAED,YAAI,KAAKD,KAAL,CAAWY,YAAX,KAA4BxC,iBAAiB,CAACI,MAAlD,EAA0D;AACxD,gBAAMqC,WAAW,GAAG,KAAKlB,IAAL,EAApB;AACA,gBAAM1B,EAAE,GAAG,CAAC4C,WAAW,GAAG,KAAKb,KAAL,CAAWc,SAA1B,IAAuC,KAAKd,KAAL,CAAWe,QAA7D;AACAL,UAAAA,QAAQ,CAAChC,kBAAT,GAA8B,KAAKsB,KAAL,CAAWe,QAAX,IAAuBF,WAAW,GAAG,KAAKb,KAAL,CAAWc,SAAhD,CAA9B;AACAJ,UAAAA,QAAQ,CAAC/B,gBAAT,GAA4BZ,kBAAkB,CAAC,KAAKiC,KAAL,CAAWhC,MAAZ,EAAoBC,EAApB,CAA9C;AACAyC,UAAAA,QAAQ,CAAC9B,sBAAT,GAAkC2B,UAAU,CAAC3B,sBAA7C;AACD;AACF;;AACD8B,MAAAA,QAAQ,CAAC5B,iBAAT;;AAEA,WAAKkC,kBAAL,CAAwBT,UAAxB,EAAoCG,QAApC;;AAEA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKC,uBAAL,EAAJ,EAAoC;AAClCP,MAAAA,YAAY,CAACrB,qBAAb;;AACA,WAAKkC,cAAL;AACD;;AAED,WAAO,KAAP;AACD;;AAIDN,EAAAA,uBAAuB,GAAG;AACxB,WAAOO,OAAO,CAAC,KAAK5B,eAAN,CAAd;AACD;;AAEDgB,EAAAA,oBAAoB,CAACZ,KAAD,EAAQ;AAC1B,UAAM;AAAChB,MAAAA,kBAAD;AAAqBE,MAAAA;AAArB,QAA+Cc,KAArD;AACA,WACE,CAAChB,kBAAkB,GAAG,CAArB,IAA0BA,kBAAkB,KAAK,MAAlD,KAA6DwC,OAAO,CAACtC,sBAAD,CADtE;AAGD;;AAEDuC,EAAAA,+BAA+B,CAACzB,KAAD,EAAQ;AACrC,QAAI,KAAKM,KAAL,CAAWC,iBAAf,EAAkC;AAChC,aAAO,KAAKD,KAAL,CAAWoB,YAAX,CAAwBC,aAAxB,CAAsC3B,KAAtC,EAA6C,KAAKM,KAAL,CAAWC,iBAAxD,CAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDI,EAAAA,2BAA2B,CAACD,YAAD,EAAeD,SAAf,EAA0B;AACnD,QAAI,CAACC,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AACD,QAAI,KAAKO,uBAAL,EAAJ,EAAoC;AAElC,aACE,KAAKX,KAAL,CAAWY,YAAX,KAA4BxC,iBAAiB,CAACG,MAA9C,IAEA,KAAK4C,+BAAL,CAAqChB,SAArC,CAHF;AAKD;;AACD,QAAI,KAAKG,oBAAL,CAA0BH,SAA1B,CAAJ,EAA0C;AAExC,aAAOA,SAAS,CAACvB,sBAAV,CAAiCyC,aAAjC,CAA+CjB,YAA/C,EAA6DD,SAA7D,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDa,EAAAA,kBAAkB,CAACT,UAAD,EAAaG,QAAb,EAAuB;AACvC/C,IAAAA,MAAM,CAAC,KAAK2C,oBAAL,CAA0BI,QAA1B,CAAD,CAAN;;AAEA,QAAI,KAAKpB,eAAT,EAA0B;AACxBgC,MAAAA,oBAAoB,CAAC,KAAKhC,eAAN,CAApB;AACD;;AAGD,UAAM;AAACV,MAAAA;AAAD,QAA2B8B,QAAjC;AACA,UAAMK,QAAQ,GAAGnC,sBAAsB,CAAC2C,WAAvB,GACb3C,sBAAsB,CAAC2C,WAAvB,CAAmChB,UAAnC,EAA+CG,QAA/C,CADa,GAEbA,QAAQ,CAAChC,kBAFb;;AAIA,QAAIqC,QAAQ,KAAK,CAAjB,EAAoB;AAClB;AACD;;AAED,UAAMS,YAAY,GAAGd,QAAQ,CAAC9B,sBAAT,CAAgC6C,eAAhC,CAAgDlB,UAAhD,EAA4DG,QAA5D,CAArB;AAEA,UAAMgB,gBAAgB,GAAG;AACvBC,MAAAA,YAAY,EAAE,IADS;AAEvBC,MAAAA,SAAS,EAAErB,UAAU,CAACsB,IAAX,KAAoBnB,QAAQ,CAACmB,IAFjB;AAGvBC,MAAAA,SAAS,EACPvB,UAAU,CAACwB,SAAX,KAAyBrB,QAAQ,CAACqB,SAAlC,IAA+CxB,UAAU,CAACyB,QAAX,KAAwBtB,QAAQ,CAACsB,QAJ3D;AAKvBC,MAAAA,UAAU,EAAE1B,UAAU,CAAC2B,OAAX,KAAuBxB,QAAQ,CAACwB,OAAhC,IAA2C3B,UAAU,CAAC4B,KAAX,KAAqBzB,QAAQ,CAACyB;AAL9D,KAAzB;AAQA,SAAKnC,KAAL,GAAa;AAEXe,MAAAA,QAFW;AAGX/C,MAAAA,MAAM,EAAE0C,QAAQ,CAAC/B,gBAHN;AAIXyC,MAAAA,YAAY,EAAEV,QAAQ,CAAC9B,sBAJZ;AAKXgC,MAAAA,YAAY,EAAEF,QAAQ,CAAC7B,sBALZ;AAOXiC,MAAAA,SAAS,EAAE,KAAKnB,IAAL,EAPA;AAQXY,MAAAA,UAAU,EAAEiB,YAAY,CAACY,KARd;AASX1B,MAAAA,QAAQ,EAAEc,YAAY,CAACa,GATZ;AAUXC,MAAAA,SAAS,EAAE,IAVA;AAWXrC,MAAAA,iBAAiB,EAAE;AAXR,KAAb;;AAaA,SAAKT,kBAAL;;AACA,SAAKN,aAAL,CAAmBwC,gBAAnB;AACD;;AAQDT,EAAAA,cAAc,GAAG;AACf,QAAI,KAAK3B,eAAT,EAA0B;AACxBgC,MAAAA,oBAAoB,CAAC,KAAKhC,eAAN,CAApB;AACA,WAAKA,eAAL,GAAuB,IAAvB;AACD;;AACD,SAAKJ,aAAL,CAAmB;AACjByC,MAAAA,YAAY,EAAE,KADG;AAEjBC,MAAAA,SAAS,EAAE,KAFM;AAGjBE,MAAAA,SAAS,EAAE,KAHM;AAIjBG,MAAAA,UAAU,EAAE;AAJK,KAAnB;AAMD;;AAEDxC,EAAAA,eAAe,GAAG;AAEhB,UAAMoB,WAAW,GAAG,KAAKlB,IAAL,EAApB;AACA,UAAM;AAACmB,MAAAA,SAAD;AAAYC,MAAAA,QAAZ;AAAsB/C,MAAAA,MAAtB;AAA8BoD,MAAAA,YAA9B;AAA4Cb,MAAAA,UAA5C;AAAwDG,MAAAA;AAAxD,QAAoE,KAAKV,KAA/E;AACA,QAAIuC,SAAS,GAAG,KAAhB;AACA,QAAIpE,CAAC,GAAG,CAAC0C,WAAW,GAAGC,SAAf,IAA4BC,QAApC;;AACA,QAAI5C,CAAC,IAAI,CAAT,EAAY;AACVA,MAAAA,CAAC,GAAG,CAAJ;AACAoE,MAAAA,SAAS,GAAG,IAAZ;AACD;;AACDpE,IAAAA,CAAC,GAAGH,MAAM,CAACG,CAAD,CAAV;AAEA,UAAMqE,QAAQ,GAAGpB,YAAY,CAACqB,gBAAb,CAA8BlC,UAA9B,EAA0CG,QAA1C,EAAoDvC,CAApD,CAAjB;AAEA,UAAMuE,QAAQ,GAAG,IAAI7E,QAAJ,CAAa2C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,KAAvB,EAA8B8C,QAA9B,CAAb,CAAjB;AACA,SAAKxC,KAAL,CAAWC,iBAAX,GAA+ByC,QAAQ,CAACC,gBAAT,EAA/B;AAEA,SAAK1D,gBAAL,CAAsB,KAAKe,KAAL,CAAWC,iBAAjC,EAAoD,KAAKP,KAAzD;;AAEA,QAAI6C,SAAJ,EAAe;AACb,WAAKtB,cAAL;;AACA,WAAKvB,KAAL,CAAWV,eAAX;AACD;AACF;;AA/LoC;;gBAAlBG,iB,kBACGV,a","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing, x0) {\n  const y0 = easing(x0);\n  return t => (1 / (1 - y0)) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop,\n  onViewportChange: noop,\n  onStateChange: noop\n};\n\nexport default class TransitionManager {\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(opts = {}) {\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _animationFrame = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps));\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning:\n        startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n    this._onTransitionFrame();\n    this.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  };\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.onViewportChange(this.state.propsInTransition, this.props);\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"],"file":"transition-manager.js"}