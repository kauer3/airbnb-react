{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport MapState from './map-state';\nimport { LinearInterpolator } from './transition';\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar DEFAULT_INERTIA = 300;\n\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\n\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar MapController = function () {\n  function MapController() {\n    var _this = this;\n\n    _classCallCheck(this, MapController);\n\n    _defineProperty(this, \"events\", []);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_events\", {});\n\n    _defineProperty(this, \"_setInteractionState\", function (newState) {\n      Object.assign(_this._interactionState, newState);\n\n      if (_this.onStateChange) {\n        _this.onStateChange(_this._interactionState);\n      }\n    });\n\n    _defineProperty(this, \"_onTransition\", function (newViewport, oldViewport) {\n      _this.onViewportChange(newViewport, _this._interactionState, oldViewport);\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  _createClass(MapController, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.mapState = this.getMapState();\n      var eventStartBlocked = this._eventStartBlocked;\n\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n        case 'tripanmove':\n          return this._onTriplePan(event);\n\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this2 = this;\n\n      var timer = setTimeout(function () {\n        if (_this2._eventStartBlocked === timer) {\n          _this2._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState, extraProps, interactionState) {\n      var oldViewport = this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n\n      var newViewport = _objectSpread(_objectSpread({}, newMapState.getViewportProps()), extraProps);\n\n      var viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n      this._state = newMapState.getState();\n\n      this._setInteractionState(interactionState);\n\n      if (viewStateChanged) {\n        this.onViewportChange(newViewport, this._interactionState, oldViewport);\n      }\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(_objectSpread(_objectSpread(_objectSpread({}, this.mapStateProps), this._state), overrides));\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onViewportChange = options.onViewportChange,\n          onStateChange = options.onStateChange,\n          _options$eventManager = options.eventManager,\n          eventManager = _options$eventManager === void 0 ? this.eventManager : _options$eventManager,\n          _options$isInteractiv = options.isInteractive,\n          isInteractive = _options$isInteractiv === void 0 ? true : _options$isInteractiv,\n          _options$scrollZoom = options.scrollZoom,\n          scrollZoom = _options$scrollZoom === void 0 ? this.scrollZoom : _options$scrollZoom,\n          _options$dragPan = options.dragPan,\n          dragPan = _options$dragPan === void 0 ? this.dragPan : _options$dragPan,\n          _options$dragRotate = options.dragRotate,\n          dragRotate = _options$dragRotate === void 0 ? this.dragRotate : _options$dragRotate,\n          _options$doubleClickZ = options.doubleClickZoom,\n          doubleClickZoom = _options$doubleClickZ === void 0 ? this.doubleClickZoom : _options$doubleClickZ,\n          _options$touchZoom = options.touchZoom,\n          touchZoom = _options$touchZoom === void 0 ? this.touchZoom : _options$touchZoom,\n          _options$touchRotate = options.touchRotate,\n          touchRotate = _options$touchRotate === void 0 ? this.touchRotate : _options$touchRotate,\n          _options$keyboard = options.keyboard,\n          keyboard = _options$keyboard === void 0 ? this.keyboard : _options$keyboard;\n      this.onViewportChange = onViewportChange;\n      this.onStateChange = onStateChange;\n      var prevOptions = this.mapStateProps || {};\n      var dimensionChanged = prevOptions.height !== options.height || prevOptions.width !== options.width;\n      this.mapStateProps = options;\n\n      if (dimensionChanged) {\n        this.mapState = prevOptions;\n        this.updateViewport(new MapState(options));\n      }\n\n      this._transitionManager.processViewportChange(options);\n\n      if (this.eventManager !== eventManager) {\n        this.eventManager = eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this3 = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this3._events[eventName] !== enabled) {\n            _this3._events[eventName] = enabled;\n\n            if (enabled) {\n              _this3.eventManager.on(eventName, _this3.handleEvent);\n            } else {\n              _this3.eventManager.off(eventName, _this3.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n      var newMapState = this._panRotate ? this.mapState.rotateStart({\n        pos: pos\n      }) : this.mapState.panStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.pan({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      if (this.dragPan) {\n        var _this$dragPan$inertia = this.dragPan.inertia,\n            inertia = _this$dragPan$inertia === void 0 ? DEFAULT_INERTIA : _this$dragPan$inertia;\n\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.pan({\n            pos: endPos\n          }).panEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: true\n          });\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      if (this.dragRotate) {\n        var _this$dragRotate$iner = this.dragRotate.inertia,\n            inertia = _this$dragRotate$iner === void 0 ? DEFAULT_INERTIA : _this$dragRotate$iner;\n\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.rotate({\n            pos: endPos\n          }).rotateEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      var _this$scrollZoom = this.scrollZoom,\n          _this$scrollZoom$spee = _this$scrollZoom.speed,\n          speed = _this$scrollZoom$spee === void 0 ? 0.01 : _this$scrollZoom$spee,\n          _this$scrollZoom$smoo = _this$scrollZoom.smooth,\n          smooth = _this$scrollZoom$smoo === void 0 ? false : _this$scrollZoom$smoo;\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        }),\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isPanning: true,\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._startPinchRotation = event.rotation;\n      this._lastPinchEvent = event;\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      var newMapState = this.mapState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newMapState = newMapState.rotate({\n          deltaAngleX: this._startPinchRotation - rotation\n        });\n      }\n\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: Boolean(this.touchZoom),\n        isZooming: Boolean(this.touchZoom),\n        isRotating: Boolean(this.touchRotate)\n      });\n      this._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (this.touchZoom) {\n        var _this$touchZoom$inert = this.touchZoom.inertia,\n            inertia = _this$touchZoom$inert === void 0 ? DEFAULT_INERTIA : _this$touchZoom$inert;\n        var _lastPinchEvent = this._lastPinchEvent;\n\n        if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n          var pos = this.getCenter(event);\n\n          var _newMapState = this.mapState.rotateEnd();\n\n          var z = Math.log2(event.scale);\n\n          var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n          var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n          _newMapState = _newMapState.zoom({\n            pos: pos,\n            scale: endScale\n          }).zoomEnd();\n          this.updateViewport(_newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionInterpolator: new LinearInterpolator({\n              around: pos\n            }),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          });\n          this.blockEvents(inertia);\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      this._startPinchRotation = null;\n      this._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (!this.touchRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (this.touchRotate) {\n        var _this$touchRotate$ine = this.touchRotate.inertia,\n            inertia = _this$touchRotate$ine === void 0 ? DEFAULT_INERTIA : _this$touchRotate$ine;\n\n        if (inertia && event.velocityY) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n\n          var _newMapState2 = this.mapState.rotate({\n            pos: endPos\n          });\n\n          this.updateViewport(_newMapState2, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          this.blockEvents(inertia);\n          return false;\n        }\n      }\n\n      var newMapState = this.mapState.rotateEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }), {\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _this$keyboard = this.keyboard,\n          _this$keyboard$zoomSp = _this$keyboard.zoomSpeed,\n          zoomSpeed = _this$keyboard$zoomSp === void 0 ? 2 : _this$keyboard$zoomSp,\n          _this$keyboard$moveSp = _this$keyboard.moveSpeed,\n          moveSpeed = _this$keyboard$moveSp === void 0 ? 100 : _this$keyboard$moveSp,\n          _this$keyboard$rotate = _this$keyboard.rotateSpeedX,\n          rotateSpeedX = _this$keyboard$rotate === void 0 ? 15 : _this$keyboard$rotate,\n          _this$keyboard$rotate2 = _this$keyboard.rotateSpeedY,\n          rotateSpeedY = _this$keyboard$rotate2 === void 0 ? 10 : _this$keyboard$rotate2;\n      var mapStateProps = this.mapStateProps;\n      var newMapState;\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed)\n            });\n          }\n\n          break;\n\n        case 187:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed)\n            });\n          }\n\n          break;\n\n        case 37:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing - rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 39:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing + rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [-moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 38:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch + rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 40:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch - rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, -moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]);\n\n  return MapController;\n}();\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","transitionInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","MapController","isDragging","onViewportChange","onStateChange","_setInteractionState","event","eventStartBlocked","x","y","srcEvent","Boolean","timeout","timer","setTimeout","newMapState","extraProps","interactionState","oldViewport","newViewport","viewStateChanged","Object","overrides","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","prevOptions","dimensionChanged","eventNames","enabled","pos","isPanning","inertia","endPos","newControllerState","isRotating","speed","smooth","delta","scale","Math","around","isZooming","rotation","deltaAngleX","_lastPinchEvent","z","velocityZ","endScale","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","mapStateProps","zoom","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity, max-statements */\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events = [];\n  scrollZoom = true;\n  dragPan = true;\n  dragRotate = true;\n  doubleClickZoom = true;\n  touchZoom = true;\n  touchRotate = false;\n  keyboard = true;\n\n  _interactionState = {\n    isDragging: false\n  };\n  _events = {};\n\n  constructor() {\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  /**\n   * Callback for events\n   * @param {object} event - a mjolnir.js Event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps, interactionState) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport =\n      this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n    const newViewport = {...newMapState.getViewportProps(), ...extraProps};\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    this._state = newMapState.getState();\n    this._setInteractionState(interactionState);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, this._interactionState, oldViewport);\n    }\n  }\n\n  _setInteractionState = newState => {\n    Object.assign(this._interactionState, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  };\n\n  _onTransition = (newViewport, oldViewport) => {\n    this.onViewportChange(newViewport, this._interactionState, oldViewport);\n  };\n\n  getMapState(overrides) {\n    return new MapState({...this.mapStateProps, ...this._state, ...overrides});\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const prevOptions = this.mapStateProps || {};\n    const dimensionChanged =\n      prevOptions.height !== options.height || prevOptions.width !== options.width;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props and fire change event\n      this.mapState = prevOptions;\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(options);\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n    const newMapState = this._panRotate\n      ? this.mapState.rotateStart({pos})\n      : this.mapState.panStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    if (this.dragPan) {\n      const {inertia = DEFAULT_INERTIA} = this.dragPan;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.pan({pos: endPos}).panEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    if (this.dragRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.dragRotate;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.rotate({pos: endPos}).rotateEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(\n      newMapState,\n      {\n        ...LINEAR_TRANSITION_PROPS,\n        transitionInterpolator: new LinearInterpolator({around: pos}),\n        transitionDuration: smooth ? 250 : 1\n      },\n      {\n        isPanning: true,\n        isZooming: true\n      }\n    );\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newMapState = newMapState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: Boolean(this.touchZoom),\n      isZooming: Boolean(this.touchZoom),\n      isRotating: Boolean(this.touchRotate)\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchZoom) {\n      const {inertia = DEFAULT_INERTIA} = this.touchZoom;\n      const {_lastPinchEvent} = this;\n      if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        const pos = this.getCenter(event);\n        let newMapState = this.mapState.rotateEnd();\n        const z = Math.log2(event.scale);\n        const velocityZ =\n          (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n        newMapState = newMapState.zoom({pos, scale: endScale}).zoomEnd();\n\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionInterpolator: new LinearInterpolator({around: pos}),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          }\n        );\n        this.blockEvents(inertia);\n        return true;\n      }\n    }\n\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.touchRotate;\n      if (inertia && event.velocityY) {\n        const pos = this.getCenter(event);\n        const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n        const newMapState = this.mapState.rotate({pos: endPos});\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        this.blockEvents(inertia);\n        return false;\n      }\n    }\n    const newMapState = this.mapState.rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed = 2, moveSpeed = 100, rotateSpeedX = 15, rotateSpeedY = 10} = this.keyboard;\n\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed)});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed)});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}