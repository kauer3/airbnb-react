{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useRef, useEffect, useState, useCallback, useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport { document } from '../utils/globals';\nimport mapboxgl from '../utils/mapboxgl';\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport { isGeolocationSupported } from '../utils/geolocate-utils';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nvar noop = function noop() {};\n\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  label: PropTypes.string,\n  disabledLabel: PropTypes.string,\n  auto: PropTypes.bool,\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  showAccuracyCircle: PropTypes.bool,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onGeolocate: PropTypes.func\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  label: 'Find My Location',\n  disabledLabel: 'Location Not Available',\n  auto: false,\n  positionOptions: {\n    enableHighAccuracy: false,\n    timeout: 6000\n  },\n  fitBoundsOptions: {\n    maxZoom: 15\n  },\n  trackUserLocation: false,\n  showUserLocation: true,\n  showAccuracyCircle: true,\n  onGeolocate: function onGeolocate() {}\n});\n\nfunction getBounds(position) {\n  var center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n  var radius = position.coords.accuracy;\n  var bounds = center.toBounds(radius);\n  return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n}\n\nfunction setupMapboxGeolocateControl(context, props, geolocateButton) {\n  var control = new mapboxgl.GeolocateControl(props);\n  control._container = document.createElement('div');\n  control._map = {\n    on: function on() {},\n    _getUIString: function _getUIString() {\n      return '';\n    }\n  };\n\n  control._setupUI(true);\n\n  control._map = context.map;\n  control._geolocateButton = geolocateButton;\n  var eventManager = context.eventManager;\n\n  if (control.options.trackUserLocation && eventManager) {\n    eventManager.on('panstart', function () {\n      if (control._watchState === 'ACTIVE_LOCK') {\n        control._watchState = 'BACKGROUND';\n        geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');\n        geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');\n      }\n    });\n  }\n\n  control.on('geolocate', props.onGeolocate);\n  return control;\n}\n\nfunction updateCamera(position, _ref) {\n  var context = _ref.context,\n      props = _ref.props;\n  var bounds = getBounds(position);\n\n  var _context$viewport$fit = context.viewport.fitBounds(bounds, props.fitBoundsOptions),\n      longitude = _context$viewport$fit.longitude,\n      latitude = _context$viewport$fit.latitude,\n      zoom = _context$viewport$fit.zoom;\n\n  var newViewState = Object.assign({}, context.viewport, {\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom\n  });\n  var mapState = new MapState(newViewState);\n  var viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n  var onViewportChange = props.onViewportChange || context.onViewportChange || noop;\n  var onViewStateChange = props.onViewStateChange || context.onViewStateChange || noop;\n  onViewStateChange({\n    viewState: viewState\n  });\n  onViewportChange(viewState);\n}\n\nfunction GeolocateControl(props) {\n  var thisRef = useMapControl(props);\n  var context = thisRef.context,\n      containerRef = thisRef.containerRef;\n  var geolocateButtonRef = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapboxGeolocateControl = _useState2[0],\n      createMapboxGeolocateControl = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      supportsGeolocation = _useState4[0],\n      setSupportsGeolocation = _useState4[1];\n\n  useEffect(function () {\n    var control;\n\n    if (context.map) {\n      isGeolocationSupported().then(function (result) {\n        setSupportsGeolocation(result);\n\n        if (geolocateButtonRef.current) {\n          control = setupMapboxGeolocateControl(context, props, geolocateButtonRef.current);\n\n          control._updateCamera = function (position) {\n            return updateCamera(position, thisRef);\n          };\n\n          createMapboxGeolocateControl(control);\n        }\n      });\n    }\n\n    return function () {\n      if (control) {\n        control._clearWatch();\n      }\n    };\n  }, [context.map]);\n  var triggerGeolocate = useCallback(function () {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl.options = thisRef.props;\n      mapboxGeolocateControl.trigger();\n    }\n  }, [mapboxGeolocateControl]);\n  useEffect(function () {\n    if (props.auto) {\n      triggerGeolocate();\n    }\n  }, [mapboxGeolocateControl, props.auto]);\n  useEffect(function () {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl._onZoom();\n    }\n  }, [context.viewport.zoom]);\n  var className = props.className,\n      label = props.label,\n      disabledLabel = props.disabledLabel,\n      trackUserLocation = props.trackUserLocation;\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    key: \"geolocate-control\",\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: \"geolocate\",\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate\",\n    ref: geolocateButtonRef,\n    disabled: !supportsGeolocation,\n    \"aria-pressed\": !trackUserLocation,\n    type: \"button\",\n    title: supportsGeolocation ? label : disabledLabel,\n    \"aria-label\": supportsGeolocation ? label : disabledLabel,\n    onClick: triggerGeolocate\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\n\nGeolocateControl.propTypes = propTypes;\nGeolocateControl.defaultProps = defaultProps;\nexport default React.memo(GeolocateControl);","map":{"version":3,"sources":["../../../src/components/geolocate-control.js"],"names":["LINEAR_TRANSITION_PROPS","TransitionManager","transitionDuration","noop","propTypes","className","PropTypes","style","label","disabledLabel","auto","positionOptions","fitBoundsOptions","trackUserLocation","showUserLocation","showAccuracyCircle","onViewStateChange","onViewportChange","onGeolocate","func","defaultProps","enableHighAccuracy","timeout","maxZoom","center","mapboxgl","position","radius","bounds","control","document","on","_getUIString","context","eventManager","geolocateButton","props","getBounds","longitude","latitude","zoom","newViewState","mapState","viewState","Object","thisRef","useMapControl","containerRef","geolocateButtonRef","useRef","mapboxGeolocateControl","createMapboxGeolocateControl","useState","supportsGeolocation","setSupportsGeolocation","useEffect","isGeolocationSupported","setupMapboxGeolocateControl","updateCamera","triggerGeolocate","useCallback","useMemo","GeolocateControl","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useRef, useEffect, useState, useCallback, useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {document} from '../utils/globals';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport {isGeolocationSupported} from '../utils/geolocate-utils';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nconst noop = () => {};\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  // Custom label assigned to the control\n  label: PropTypes.string,\n  disabledLabel: PropTypes.string,\n  // Auto trigger instead of waiting for click\n  auto: PropTypes.bool,\n\n  // mapbox geolocate options\n  // https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  showAccuracyCircle: PropTypes.bool,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n\n  onGeolocate: PropTypes.func\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  label: 'Find My Location',\n  disabledLabel: 'Location Not Available',\n  auto: false,\n\n  // mapbox geolocate options\n  positionOptions: {enableHighAccuracy: false, timeout: 6000},\n  fitBoundsOptions: {maxZoom: 15},\n  trackUserLocation: false,\n  showUserLocation: true,\n  showAccuracyCircle: true,\n\n  onGeolocate: () => {}\n});\n\nfunction getBounds(position) {\n  const center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n  const radius = position.coords.accuracy;\n  const bounds = center.toBounds(radius);\n\n  return [\n    [bounds._ne.lng, bounds._ne.lat],\n    [bounds._sw.lng, bounds._sw.lat]\n  ];\n}\n\nfunction setupMapboxGeolocateControl(context, props, geolocateButton) {\n  const control = new mapboxgl.GeolocateControl(props);\n\n  // Dummy placeholders so that _setupUI does not crash\n  control._container = document.createElement('div');\n  control._map = {\n    on: () => {},\n    _getUIString: () => ''\n  };\n  control._setupUI(true);\n  control._map = context.map;\n\n  // replace mapbox internal UI elements with ours\n  control._geolocateButton = geolocateButton;\n\n  // From _setupUI\n  // when the camera is changed (and it's not as a result of the Geolocation Control) change\n  // the watch mode to background watch, so that the marker is updated but not the camera.\n  const {eventManager} = context;\n  if (control.options.trackUserLocation && eventManager) {\n    eventManager.on('panstart', () => {\n      if (control._watchState === 'ACTIVE_LOCK') {\n        control._watchState = 'BACKGROUND';\n        geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');\n        geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');\n      }\n    });\n  }\n\n  control.on('geolocate', props.onGeolocate);\n  return control;\n}\n\nfunction updateCamera(position, {context, props}) {\n  const bounds = getBounds(position);\n  const {longitude, latitude, zoom} = context.viewport.fitBounds(bounds, props.fitBoundsOptions);\n\n  const newViewState = Object.assign({}, context.viewport, {\n    longitude,\n    latitude,\n    zoom\n  });\n  const mapState = new MapState(newViewState);\n  const viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n\n  const onViewportChange = props.onViewportChange || context.onViewportChange || noop;\n  const onViewStateChange = props.onViewStateChange || context.onViewStateChange || noop;\n\n  // Call new style callback\n  onViewStateChange({viewState});\n\n  // Call old style callback\n  onViewportChange(viewState);\n}\n\nfunction GeolocateControl(props) {\n  const thisRef = useMapControl(props);\n  const {context, containerRef} = thisRef;\n  const geolocateButtonRef = useRef(null);\n  const [mapboxGeolocateControl, createMapboxGeolocateControl] = useState(null);\n  const [supportsGeolocation, setSupportsGeolocation] = useState(false);\n\n  useEffect(() => {\n    let control;\n\n    if (context.map) {\n      isGeolocationSupported().then(result => {\n        setSupportsGeolocation(result);\n\n        if (geolocateButtonRef.current) {\n          control = setupMapboxGeolocateControl(context, props, geolocateButtonRef.current);\n          // Overwrite Mapbox's GeolocateControl internal method\n          control._updateCamera = position => updateCamera(position, thisRef);\n          createMapboxGeolocateControl(control);\n        }\n      });\n    }\n\n    return () => {\n      if (control) {\n        control._clearWatch();\n      }\n    };\n  }, [context.map]);\n\n  const triggerGeolocate = useCallback(() => {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl.options = thisRef.props;\n      mapboxGeolocateControl.trigger();\n    }\n  }, [mapboxGeolocateControl]);\n\n  useEffect(() => {\n    if (props.auto) {\n      triggerGeolocate();\n    }\n  }, [mapboxGeolocateControl, props.auto]);\n\n  useEffect(() => {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl._onZoom();\n    }\n  }, [context.viewport.zoom]);\n\n  const {className, label, disabledLabel, trackUserLocation} = props;\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  return (\n    <div style={style} className={className}>\n      <div key=\"geolocate-control\" className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key=\"geolocate\"\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate`}\n          ref={geolocateButtonRef}\n          disabled={!supportsGeolocation}\n          aria-pressed={!trackUserLocation}\n          type=\"button\"\n          title={supportsGeolocation ? label : disabledLabel}\n          aria-label={supportsGeolocation ? label : disabledLabel}\n          onClick={triggerGeolocate}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nGeolocateControl.propTypes = propTypes;\nGeolocateControl.defaultProps = defaultProps;\n\nexport default React.memo(GeolocateControl);\n"]},"metadata":{},"sourceType":"module"}