{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport useDraggableControl, { draggableControlDefaultProps, draggableControlPropTypes } from './draggable-control';\nimport { crispPixel } from '../utils/crisp-pixel';\nvar propTypes = Object.assign({}, draggableControlPropTypes, {\n  className: PropTypes.string,\n  longitude: PropTypes.number.isRequired,\n  latitude: PropTypes.number.isRequired\n});\nvar defaultProps = Object.assign({}, draggableControlDefaultProps, {\n  className: ''\n});\n\nfunction getPosition(_ref) {\n  var props = _ref.props,\n      state = _ref.state,\n      context = _ref.context;\n  var longitude = props.longitude,\n      latitude = props.latitude,\n      offsetLeft = props.offsetLeft,\n      offsetTop = props.offsetTop;\n  var dragPos = state.dragPos,\n      dragOffset = state.dragOffset;\n\n  if (dragPos && dragOffset) {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  var _context$viewport$pro = context.viewport.project([longitude, latitude]),\n      _context$viewport$pro2 = _slicedToArray(_context$viewport$pro, 2),\n      x = _context$viewport$pro2[0],\n      y = _context$viewport$pro2[1];\n\n  x += offsetLeft;\n  y += offsetTop;\n  return [x, y];\n}\n\nfunction Marker(props) {\n  var thisRef = useDraggableControl(props);\n  var state = thisRef.state,\n      containerRef = thisRef.containerRef;\n  var children = props.children,\n      className = props.className,\n      draggable = props.draggable;\n  var dragPos = state.dragPos;\n\n  var _getPosition = getPosition(thisRef),\n      _getPosition2 = _slicedToArray(_getPosition, 2),\n      x = _getPosition2[0],\n      y = _getPosition2[1];\n\n  var transform = \"translate(\".concat(crispPixel(x), \"px, \").concat(crispPixel(y), \"px)\");\n  var cursor = draggable ? dragPos ? 'grabbing' : 'grab' : 'auto';\n  var control = useMemo(function () {\n    var containerStyle = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform: transform,\n      cursor: cursor\n    };\n    return React.createElement(\"div\", {\n      className: \"mapboxgl-marker \".concat(className),\n      ref: thisRef.containerRef,\n      style: containerStyle\n    }, children);\n  }, [children, className]);\n  var container = containerRef.current;\n\n  if (container) {\n    container.style.transform = transform;\n    container.style.cursor = cursor;\n  }\n\n  return control;\n}\n\nMarker.defaultProps = defaultProps;\nMarker.propTypes = propTypes;\nexport default React.memo(Marker);","map":{"version":3,"sources":["../../../src/components/marker.js"],"names":["propTypes","className","PropTypes","longitude","latitude","isRequired","defaultProps","props","state","context","offsetLeft","offsetTop","dragPos","dragOffset","x","y","thisRef","useDraggableControl","containerRef","children","draggable","getPosition","transform","crispPixel","cursor","control","useMemo","containerStyle","position","left","top","container","Marker","React"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport useDraggableControl, {\n  draggableControlDefaultProps,\n  draggableControlPropTypes\n} from './draggable-control';\nimport {crispPixel} from '../utils/crisp-pixel';\n\nconst propTypes = Object.assign({}, draggableControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired\n});\n\nconst defaultProps = Object.assign({}, draggableControlDefaultProps, {\n  className: ''\n});\n\nfunction getPosition({props, state, context}) {\n  const {longitude, latitude, offsetLeft, offsetTop} = props;\n  const {dragPos, dragOffset} = state;\n\n  // If dragging, just return the current drag position\n  if (dragPos && dragOffset) {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  // Otherwise return the projected lat/lng with offset\n  let [x, y] = context.viewport.project([longitude, latitude]);\n  x += offsetLeft;\n  y += offsetTop;\n  return [x, y];\n}\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nfunction Marker(props) {\n  const thisRef = useDraggableControl(props);\n  const {state, containerRef} = thisRef;\n\n  const {children, className, draggable} = props;\n  const {dragPos} = state;\n\n  const [x, y] = getPosition(thisRef);\n  const transform = `translate(${crispPixel(x)}px, ${crispPixel(y)}px)`;\n  const cursor = draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto';\n\n  // Perf: avoid rerendering if only the viewport changed\n  const control = useMemo(() => {\n    const containerStyle = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform,\n      cursor\n    };\n\n    return (\n      <div\n        className={`mapboxgl-marker ${className}`}\n        ref={thisRef.containerRef}\n        // @ts-ignore\n        style={containerStyle}\n      >\n        {children}\n      </div>\n    );\n  }, [children, className]);\n\n  const container = containerRef.current;\n  if (container) {\n    container.style.transform = transform;\n    container.style.cursor = cursor;\n  }\n\n  return control;\n}\n\nMarker.defaultProps = defaultProps;\nMarker.propTypes = propTypes;\n\nexport default React.memo(Marker);\n"]},"metadata":{},"sourceType":"module"}