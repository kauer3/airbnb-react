{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { createContext, useState, useContext } from 'react';\nvar MapContext = createContext({\n  viewport: null,\n  map: null,\n  container: null,\n  onViewportChange: null,\n  onViewStateChange: null,\n  eventManager: null\n});\nexport var MapContextProvider = MapContext.Provider;\n\nfunction WrappedProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var context = useContext(MapContext);\n  value = _objectSpread(_objectSpread({\n    setMap: setMap\n  }, context), {}, {\n    map: context && context.map || map\n  }, value);\n  return React.createElement(MapContextProvider, {\n    value: value\n  }, children);\n}\n\nMapContext.Provider = WrappedProvider;\nexport default MapContext;","map":{"version":3,"sources":["../../../src/components/map-context.js"],"names":["MapContext","createContext","viewport","map","container","onViewportChange","onViewStateChange","eventManager","MapContextProvider","value","children","setMap","useState","context","useContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,QAAA,EAAA,UAAA,QAAA,OAAA;AAEA,IAAMA,UAAU,GAAGC,aAAa,CAAC;AAI/BC,EAAAA,QAAQ,EAJuB,IAAA;AAM/BC,EAAAA,GAAG,EAN4B,IAAA;AAQ/BC,EAAAA,SAAS,EARsB,IAAA;AAW/BC,EAAAA,gBAAgB,EAXe,IAAA;AAY/BC,EAAAA,iBAAiB,EAZc,IAAA;AAe/BC,EAAAA,YAAY,EAAE;AAfiB,CAAD,CAAhC;AAmBA,OAAO,IAAMC,kBAAkB,GAAGR,UAAU,CAArC,QAAA;;AAGP,SAAA,eAAA,CAAA,IAAA,EAA4C;AAAA,MAAlBS,KAAkB,GAAA,IAAA,CAAlBA,KAAkB;AAAA,MAAXC,QAAW,GAAA,IAAA,CAAXA,QAAW;;AAAA,MAAA,SAAA,GACpBE,QAAQ,CADY,IACZ,CADY;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MACnCT,GADmC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAC9BQ,MAD8B,GAAA,UAAA,CAAA,CAAA,CAAA;;AAE1C,MAAME,OAAO,GAAGC,UAAU,CAA1B,UAA0B,CAA1B;AAEAL,EAAAA,KAAK,GAAA,aAAA,CAAA,aAAA,CAAA;AACHE,IAAAA,MAAM,EAANA;AADG,GAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAGHR,IAAAA,GAAG,EAAGU,OAAO,IAAIA,OAAO,CAAnB,GAACA,IAA2BV;AAH9B,GAAA,EAALM,KAAK,CAALA;AAOA,SAAO,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AAAoB,IAAA,KAAK,EAAEA;AAA3B,GAAA,EAAP,QAAO,CAAP;AACD;;AAEDT,UAAU,CAAVA,QAAAA,GAAAA,eAAAA;AAEA,eAAA,UAAA","sourcesContent":["import * as React from 'react';\nimport {createContext, useState, useContext} from 'react';\n\nconst MapContext = createContext({\n  /* Map context */\n\n  // Viewport\n  viewport: null,\n  // mapboxgl.Map instance\n  map: null,\n  // DOM element that contains the map\n  container: null,\n\n  /* Interaction callbacks */\n  onViewportChange: null,\n  onViewStateChange: null,\n\n  // EventManager instance\n  eventManager: null\n});\n\n// Save the original Provider component\nexport const MapContextProvider = MapContext.Provider;\n\n// And replace Provider with our own\nfunction WrappedProvider({value, children}) {\n  const [map, setMap] = useState(null);\n  const context = useContext(MapContext);\n\n  value = {\n    setMap,\n    ...context,\n    map: (context && context.map) || map,\n    ...value\n  };\n\n  return <MapContextProvider value={value}>{children}</MapContextProvider>;\n}\n\nMapContext.Provider = WrappedProvider;\n\nexport default MapContext;\n"]},"metadata":{},"sourceType":"module"}