{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useEffect, useCallback, useState, useRef, useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  var control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  control._updateAttributions();\n\n  control._updateEditLink();\n\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  var _useMapControl = useMapControl(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var innerContainerRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showCompact = _useState2[0],\n      setShowCompact = _useState2[1];\n\n  useEffect(function () {\n    var control;\n\n    if (context.map) {\n      control = setupAttributioncontrol({\n        customAttribution: props.customAttribution\n      }, context.map, containerRef.current, innerContainerRef.current);\n    }\n\n    return function () {\n      return control && removeAttributionControl(control);\n    };\n  }, [context.map]);\n  var compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n  useEffect(function () {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n  var toggleAttribution = useCallback(function () {\n    return setShowCompact(function (value) {\n      return !value;\n    });\n  }, []);\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: props.className\n  }, React.createElement(\"div\", {\n    ref: containerRef,\n    \"aria-pressed\": showCompact,\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-attrib \".concat(compact ? 'mapboxgl-compact' : '', \" \").concat(showCompact ? 'mapboxgl-compact-show' : '')\n  }, React.createElement(\"button\", {\n    className: \"mapboxgl-ctrl-attrib-button\",\n    title: props.toggleLabel,\n    onClick: toggleAttribution\n  }), React.createElement(\"div\", {\n    ref: innerContainerRef,\n    className: \"mapboxgl-ctrl-attrib-inner\",\n    role: \"list\"\n  })));\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\nexport default React.memo(AttributionControl);","map":{"version":3,"sources":["../../../src/components/attribution-control.js"],"names":["propTypes","toggleLabel","PropTypes","className","style","compact","customAttribution","defaultProps","control","mapboxgl","map","context","containerRef","useMapControl","innerContainerRef","useRef","showCompact","setShowCompact","useState","useEffect","setupAttributioncontrol","props","removeAttributionControl","toggleAttribution","useCallback","useMemo","position","AttributionControl","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useEffect, useCallback, useState, useRef, useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  const control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  // from AttributionControl.onAdd()\n  control._updateAttributions();\n  control._updateEditLink();\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const innerContainerRef = useRef(null);\n  const [showCompact, setShowCompact] = useState(false);\n\n  useEffect(() => {\n    let control;\n    if (context.map) {\n      control = setupAttributioncontrol(\n        {\n          customAttribution: props.customAttribution\n        },\n        context.map,\n        containerRef.current,\n        innerContainerRef.current\n      );\n    }\n\n    return () => control && removeAttributionControl(control);\n  }, [context.map]);\n\n  const compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n\n  useEffect(() => {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n\n  const toggleAttribution = useCallback(() => setShowCompact(value => !value), []);\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  return (\n    <div style={style} className={props.className}>\n      <div\n        ref={containerRef}\n        aria-pressed={showCompact}\n        className={`mapboxgl-ctrl mapboxgl-ctrl-attrib ${compact ? 'mapboxgl-compact' : ''} ${\n          showCompact ? 'mapboxgl-compact-show' : ''\n        }`}\n      >\n        <button\n          className=\"mapboxgl-ctrl-attrib-button\"\n          title={props.toggleLabel}\n          onClick={toggleAttribution}\n        />\n        <div ref={innerContainerRef} className=\"mapboxgl-ctrl-attrib-inner\" role=\"list\" />\n      </div>\n    </div>\n  );\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\n\nexport default React.memo(AttributionControl);\n"]},"metadata":{},"sourceType":"module"}